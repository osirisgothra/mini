#!/usr/bin/perl
#
#    shellify
#    shellify your life
#    eso-bin
#    esoteric projects
#
#    Copyright (C) 1995-2018 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Sun Oct  7 08:35:55 EDT 2018
#            osirisgothra@larnica initially created this file
#            with the original name, shell
#
#  (this header was created using the template generator by Gabriel T. Sharp)
#
#
#

use v5.20;
use warnings;
use strict;
use File::Slurp;
use Getopt::Long::Descriptive;
use IPC::Open3;
use File::Path
package Shellify;

my ($opt, $usage) = describe_options(
    'my-program %o <some-arg>',
    [ 'server|s=s', "the server to connect to", { required => 1  } ],
    [ 'port|p=i',   "the port to connect to",   { default  => 79 } ],
    [],
    [ 'verbose|v',  "print extra stuff"            ],
    [ 'help',       "print usage message and exit" ],
 );

print($usage->text), exit if $opt->help;

my $configfile = "$ENV{HOME}/.${0}rc";




# read in a whole file into a scalar
  my $text = read_file( 'filename' ) ;

# read in a whole file into an array of lines
  my @lines = read_file( 'filename' ) ;

# write out a whole file from a scalar
  write_file( 'filename', $text ) ;

# write out a whole file from an array of lines
  write_file( 'filename', @lines ) ;

# Here is a simple and fast way to load and save a simple config file
# made of key=value lines.
  my %conf = read_file( $file_name ) =~ /^(\w+)=(.*)$/mg ;
  write_file( $file_name, {atomic => 1}, map "$_=$conf{$_}\n", keys %conf ) ;

# insert text at the beginning of a file
  prepend_file( 'filename', $text ) ;

# in-place edit to replace all 'foo' with 'bar' in file 
  edit_file { s/foo/bar/g } 'filename' ;

# in-place edit to delete all lines with 'foo' from file
  edit_file_lines sub { $_ = '' if /foo/ }, 'filename' ;

# read in a whole directory of file names (skipping . and ..)
  my @files = read_dir( '/path/to/dir' ) ;

###################


    $pid = open3(\*CHLD_IN, \*CHLD_OUT, \*CHLD_ERR,
		    'some cmd and args', 'optarg', ...);

    my($wtr, $rdr, $err);
    use Symbol 'gensym'; $err = gensym;
    $pid = open3($wtr, $rdr, $err,
		    'some cmd and args', 'optarg', ...);

    waitpid( $pid, 0 );
    my $child_exit_status = $? >> 8;


######################


