#!/bin/zsh
#
#    gimp-fork
#    forks gimp while making sure it is done right
#    mini/eso
#    small projects and stand-alone programs or documents, esoteric or dependant
#
#    Copyright (C) 1995-2021 Gabriel T. Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all projects can be
#    obtained by visiting the repository at:
#
#    <https://github.com/osirisgothra>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Sat 27 Feb 2021 08:44:02 AM EST
#            osirisgothra@ officially applied a template to this file
#            with the original name, gimp-fork, renamde to ~/bin/gimp (or ubin-local/gimp online)
#    Sat 27 Feb 2021 08:59:29 AM EST
#            The Author finalized this script and declares it a finished product -- it will now be mirrored
#            and has gained completion status fully tested under Xubuntu 20.04 and 20.10, passing all tests.
#
#            The Author has verfied that the file adheres to the '2020 Columnized Strict Commenting Scheme' which is
#            also known as the "2020/CSCS". This scheme requires that 1) all comments are in the form of footnotes
#            with only a refnum in the far right column. This is in an effort to join the massive need for commenting
#            your code reformation goin on all over the world, 2) footnotes are at the END of the file, beyond any
#            executable code or other footnotes. Are easy to read and spot. 3) Do not count for more than 20% of the file's size.
#            3-CODE Status: PASS PASS PASS (all 100%) A score of 80% or better is required to be 2020CSCS compliant.
#
#
#  This template and header was created using the template generator by Gabriel T. Sharp
#  You can download the latest version at: <https://www.github.com/osirisgothra/mini.git/eso/ubin-local/template>
#  (the url is subject to changes on github's behalf, please submit a pull request to fix or request a fix on any url changes)
#


setopt interactivecomments
setopt aliases                                                                                                                                                                   #10


echo "attempting to fork ${0:t} with"                                                                                                                                            #9
declare -g GIMP_TEMP_LOC=/tmp                                                                                                                                                    #8
#declare -g GIMP_TEMP_LOC=~/.cache                                                                                                                                               #7
declare -g GIMP_STATUS_LOG=$GIMP_TEMP_LOC/gimp-status.log
declare -g GIMP_ERROR_LOG=$GIMP_TEMP_LOC/gimp-errors.log
#GIMP_STATUS_LOG=/dev/null                                                                                                                                                       #6
#GIMP_ERROR_LOG=$GIMP_STATUS_LOG
declare -g STDOUT=1 STDERR=2                                                                                                                                                     #5
#declare -g STDOUT=CON STDERR=AUX                                                                                                                                                #4
declare -g GIMP_COMMAND_EXEC="/usr/bin/gimp $(for x; do echo -n "\"$x\" "; done)${1+ }$STDOUT> $GIMP_STATUS_LOG $STDERR> $GIMP_ERROR_LOG &!"                                     #1
echo "executing command is [${GIMP_COMMAND_EXEC}], excluding braces ([])."
eval "$GIMP_COMMAND_EXEC"                                                                                                                                                        #3
rv=$?                                                                                                                                                                            #2
if pgrep gimp &> /dev/null; then
    echo "gimp running ok (`pidof gimp`)"
else
    echo "gimp not running, assuming an error (rv=$rv)"
    [[ $rv -eq 0 ]] &&  rv=129
fi
exit $rv

# Script Comments
#
#0  comments are in order of WHEN (time/date) they were added, not their position within the file itself or line numbers!
#
#1  most important line because it defines the actual command, nothing could happen if this line is not there
#   second line after it, shows us EXACTLY whats being executed so we know theres no command line errors--watch this first run!
#2  if fork was success, return 129, otherwise give back gimp's error code, and above, determine if gimp is running
#   if it is, we make the return value 0 (succeess) or keep it 129 (unknown status) or 1-255 (gimp error)
#3  This is the actual command that is executed once and only once, assumes it will be forked, exits with 129 if it is not (so we know it was OUR error, or anything else if gimp's error was > 0)
#4  An old dossy environment would use something like this (dont use this if you arent sure what it is for!), or close to it.
#5  You might want to change these if your terminal uses something other than '1' and '2' for stdout/err (ie, nonlinux systems).
#6  Un-comment these lines if you dont want logs at all (caution: may hang the system if an error happens due to aformentioned bug!
#7  Un-comment this line if you cannot write to /tmp (on a foriegn server, for example).
#8  Due to gimp bug: startup doesnt happen if an error or message is printed and no device is there to display or output it, even if it is just a file, so we must log these to files so they dont hang GIMP's startup process.
#9  IMPORTANT: 99% of the time, this (This pertains to this entire file) will NOT need changed, please dont change unless you know EXACTLY what you are doing!
#10 Options processor part of the template was generated but currently unused, to adhere to my in-source comment laws, they must be pasted here in place of #10 until they are re-enabled:
#
# -------- cut here --------------------------------------------------------------------------
# Option-recognition is currently disabled, it will stay that way until it is needed
# 10 #  do not delete this text because it is still a possible use.
# 10 #
# 10 # declare -ga opts
# 10 # declare -gi quiet_level=0
# 10 # declare -g version_text="$(tput setaf 124)gimp-fork$(tput sgr0) Version 1.0 (C)2020 Gabriel T. Sharp, Licensed under GNU LGPL3 at https://gpl.gnu.org/gpl3.html"
# 10 # declare -g help_text="gimp-fork
# 10 # forks gimp while making sure it is done right
# 10 #
# 10 # SYNTAX
# 10 #
# 10 # 	gimp-fork [OPTIONS] ARGUMENTS
# 10 #
# 10 # OPTIONS
# 10 # 	--help -h	show this help text
# 10 #  --version -v   display version information and exit (also shows license info)
# 10 #    --quiet -q   increase quiet level by one (quiet level is always zero if left alone)
# 10 #
# 10 # ARGUMENTS
# 10 #
# 10 # 	FILENAME	A filename that must exist or be writable by the current user.
# 10 # 	PATHNAME	A relative or absolute path that must exist or be creatable.
# 10 # 	STRING		A readable string, it must not contain any unreprintable characters.
# 10 # 	NUMBER		An integer, usually between -32767 and 32767.
# 10 # 	BOOLEAN		A true/false value, represented as 0 for false, and any other value for true.
# 10 # 	FLOAT		A floating point single or double precision value, it is precise down to about 5 ot 6 decimal places.
# 10 # 	ENG			Scientific notation, expressed in powers (3x10^4 is written as 3.4)
# 10 # 	DEG			Like GRAD/RAD, but expressed in degrees (hours, minutes, seconds) so 3 5'5\" is written as \"3.5.5\"
# 10 #
# 10 #
# 10 # LICENSE
# 10 #
# 10 # 	GNU LGPL3 is available in full at the GNU GPL website, or through the google voice command 'show me GNU LGPL VERSION 3'
# 10 #
# 10 # "
# 10 #
# 10 # lecho() { builtin echo "$@"; }
# 10 #
# 10 # echo() {
# 10 # 	if [[ $quiet_level -gt 0 ]]; then
# 10 # 		return 127
# 10 # 	else
# 10 # 		builtin echo "$@"
# 10 # 	fi
# 10 # }
# 10 #
# 10 # is() {
# 10 #     case $1 in
# 10 #         quiet)  ((quiet_level > 0));;
# 10 #       verbose)  ((quiet_level < 0));;
# 10 #        normal)  ((quiet_level == 0));;
# 10 #      notquiet)  ((quiet_level <= 0));;
# 10 #             *)  ((quiet_level == 1));;
# 10 #     esac
# 10 # }
# 10 # if opts=( `getopt -n $0 -o hvqV -l verbose,help,version,quiet -- "$@"` ); then
# 10 # 	eval set -- "${opts[@]}"
# 10 # 	while [[ $# -ge 0 ]]; do
# 10 # 		curopt=$1
# 10 # 		nextopt=${2-none}
# 10 # 		shift
# 10 # 		case $curopt in
# 10 # 			--help|-h)	echo "$help_text"; exit 127;;
# 10 # 			--version|-v) echo "$version_text"; exit 127;;
# 10 #             --verbose|-V) let quiet_level--;;
# 10 # 			--quiet|-q) let quiet_level++;;
# 10 # 			--) is verbose && echo "done with options";  break;;
# 10 # 			*)	is verbose && echo "handling option: $curopt (next:$nextopt)";;
# 10 # 		esac
# 10 # 	done
# 10 # 	for arg; do
# 10 # 		case $arg in
# 10 # 			*)	is verbose && echo "handling argument: $arg";;
# 10 # 		esac
# 10 # 	done
# 10 # else
# 10 # 	is notquiet && echo "error, code is $?, exiting with fail"
# 10 # fi
# -------- cut here --------------------------------------------------------------------------
