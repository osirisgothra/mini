#!/usr/bin/perl
#
#    psh-wdid
#    no idea what this does
#    unknown project
#    unknown project description...?
#
#    Copyright (C) 1995-2019 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Sat Mar 30 08:27:18 EDT 2019
#            osirisgothra@larnica initially created this file
#            with the original name, psh-wdid
#
#  (this header was created using the template generator by Gabriel T. Sharp)
#
#
# TARGET NOTES
#

use warnings;
use strict;
use v5.20;

no warnings "experimental";

use File::Slurp;
use Path::Tiny;
my $verbose = 1;
sub vsay { say(@_) if $verbose; }

for my $file (@ARGV) 
{
	my @lines = read_file($file);
	chomp(@lines);
	my $section = "global";
	my $subsection = "root";
	my $text = "<none>";
	my %sections = ( );	
	my $secnum = 0;
	my $secltr = 'A';
	say("set color");
	say("format A 10 2 1");
	for my $line (@lines)
	{
		given($line)
		{
			when(/^\*+/)
			{	#$secltr++;
				$section = $line;	
				$section =~ s/(^\s*\*+\s*|\s*\*+\s*$)//g;
				# we also reset back to default subsection
				$subsection = "root";
				vsay("${secltr}${secnum} [0;31mnew section: [0;36m${line}[0m");				
				vsay("[0;34msection is now effectively[30;1m: [0;34m${section}[30;1m::[0;35m${subsection}");
			}
			when(/^\s*sed\b/)
			{
				# text is the actual command refered by subsection
				$text = $line;
				say("label ${secltr}1 = \"${section} ${subsection}\"");
				say("label ${secltr}2 = \"${text}\"");				
				$secltr++;
				# only time something gets added is here
								
			}
			default
			{
				# unstarred is a description (subsection) of proceeding sed statement(s)
				$subsection = $line;
				#$secltr++;
				vsay("${secltr}${secnum} [0;32m${section}[0;30m::[0;35m${subsection}[0m has been created[0m");								
			}
		
		}	
	}
}
say("goto B8 A0");