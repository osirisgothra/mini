#!/bin/zsh
#
#    snip
#    snipit
#    mini/eso
#    small projects and stand-alone programs or documents, esoteric or dependant
#
#    Copyright (C) 1995-2021 Gabriel T. Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all projects can be
#    obtained by visiting the repository at:
#
#    <https://github.com/osirisgothra>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Mon 14 Jun 2021 12:15:14 PM EDT
#            osirisgothra@ initially created this file
#            with the original name, snip
#
#
#
#  This template and header was created using the template generator by Gabriel T. Sharp
#  You can download the latest version at: <https://www.github.com/osirisgothra/mini.git/eso/ubin-local/template>
#  (the url is subject to changes on github's behalf, please submit a pull request to fix or request a fix on any url changes)
#

case $# in 0)   set -- --help;; esac


##### SNIPPETS

declare -gA snips=(

      "getopt" "use Getopt::Long::Descriptive;

  my (\$opt, \$usage) = describe_options(
    'my-program %o <some-arg>',
    [ 'server|s=s', \"the server to connect to\", { required => 1  } ],
    [ 'port|p=i',   \"the port to connect to\",   { default  => 79 } ],
    [],
    [ 'verbose|v',  \"print extra stuff\"            ],
    [ 'help',       \"print usage message and exit\", { shortcircuit => 1 } ],
  );

  print(\$usage->text), exit if \$opt->help;
"
)
################ END OF SNIPPETS

# Get Options from Command Line for snip

declare -ga opts
declare -gi quiet_level=0
declare -g version_text="$(tput setaf 124)snip$(tput sgr0) Version 1.0 (C)2020 Gabriel T. Sharp, Licensed under GNU LGPL3 at https://gpl.gnu.org/gpl3.html"
declare -g help_text="snip
snipit

SYNTAX

	snip [OPTIONS] SNIPPET [...]

OPTIONS
    --list -l   show all snippets available
	--help -h	show this help text
 --version -v   display version information and exit (also shows license info)
   --quiet -q   increase quiet level by one (quiet level is always zero if left alone)

ARGUMENTS

    SNIPPET         a predefined snippet

LICENSE

	GNU LGPL3 is available in full at the GNU GPL website, or through the google voice command 'show me GNU LGPL VERSION 3'

"
hrule() { repeat $(( ${COLUMNS- 80} * 0.75 )) { printf "=" }; printf '\n'; }
vrule() {  
            VCOLS=${1- 15}
            echo "[sx"; 
            repeat $VCOLS { 
                printf "|\n" 
            }
            echo "[u";
        }
lecho() { builtin echo "$@"; }

echo() {
	if [[ $quiet_level -gt 0 ]]; then
		return 127
	else
		builtin echo "$@"
	fi
}

is() {
    case $1 in
        quiet)  ((quiet_level > 0));;
      verbose)  ((quiet_level < 0));;
       normal)  ((quiet_level == 0));;
     notquiet)  ((quiet_level <= 0));;
            *)  ((quiet_level == 1));;
    esac
}

if opts=( `getopt -n $0 -o hvqVl -l list,verbose,help,version,quiet -- "$@"` ); then
	eval set -- "${opts[@]}"
	while [[ $# -ge 0 ]]; do
		curopt=$1
		nextopt=${2-none}
		shift
		# handle --options and -o ptions here
		case $curopt in
		    --list|-l)  echo
		                echo "Available Snippets"; hrule
		                echo
		                for x in ${(k)snips}; do
		                    echo "$x"
	                    done
	                    echo
	                    hrule
	                    echo "${(c)#snips} byte(s) in ${#snips} snippet(s)"
	                    echo
	                    exit 127
	                    ;;
	                    
		                
			--help|-h)	echo "$help_text"; exit 127;;
			--version|-v) echo "$version_text"; exit 127;;
            --verbose|-V) let quiet_level--;;
			--quiet|-q) let quiet_level++;;
			--) is verbose && echo "done with options";  break;;
			*)	is verbose && echo "handling option: $curopt (next:$nextopt)";;
		esac
	done
	for arg; do
		# verify/handle non-option arguments
		case $arg in
			*)	is verbose && echo "handling argument: $arg";;
		esac
	done

else
	is notquiet && echo "error, code is $?, exiting with fail"
fi

#1
integer badfound=0
for item; do    
    if [[ ${(k)snips[$item]} != "$item" ]]; then           
        echo "fatal: the \"${item}\" snippet does not exist"
        let badfound++
    fi
done
((badfound)) && exit 127
#2
for item; do
    echo "${snips[$item]}"
done    



#cs21k

#1  check all snips and make sure they exist
#2  print out all snips to stdout


