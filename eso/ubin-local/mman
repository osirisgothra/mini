#!/usr/bin/perl
# FILE
#    mman
#    man with a few extra features and more
#
# PROJECT
#    eso-bin/ubin-local
#	 esoteric projects
#
# AUTHOR / COPYRIGHT
#
#    Copyright (C) 2020, Gabriel Thomas Sharp
#
#    Written by Gabriel Thomas Sharp osirisgothra@larnica
#    Latest versions of this and all of Gabriel Thomas Sharp's projects can be
#    obtained from:
#
#    Documentation Available At:
#
#     <http://www.github.com/osirisgothra/eso-bin/ubin-local.git>
#
# LICENSE
#
#    eso-bin/ubin-local/man  is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  NOTES
#
#     * TODO: move 'use' statements to top if you want to keep them**
#    ** this feature will be added to the next version of perltemplate (hopefully)
#   *** warnings are disabled for experimental and once because they are pretty
#       annoying here, you might want to re-enable them for your own program
#       to do this during testing and development.
#
#  HISTORY
#
#	Mon Feb 10 20:04:32 2020
#         osirisgothra@larnica.(none) created this file using the template generator 'perltemplate'
#         and named it man for the project 'mman'.
#
#
# (created with perltemplate by Gabriel T. Sharp <osirisgothra@hotmail.com>)
#

use warnings;
use v5.20.2;
use strict;
use feature "signatures";			# 	allow 'sub routine($param1, $param2, $and_so_on)' styled functions
no warnings "experimental";			# 	allow given/when/default and smartmatching without their warnings***
no warnings "once";					# 	allow variables to be used just once without warning***
use Getopt::Long::Descriptive; 
use Path::Tiny;
use Env qw( @PATH $HOME );				#	access $PATH as an array (it is already setup here)

my $summary = "\nLaunch manual viewer with some extra abilities.\n";
my $details = "\n* Adding \"--\" will cause arguments to be forcibly passed to man(1)\n";
my $tba = "to be announced";
			

my ($opt, $usage) = describe_options(
    '%c %o <some-arg> file',
	[ $summary ] ,
	[ "\nMain options:\n" ] ,
	[ $tba ] ,
    [],
	[ "\nMiscellaneous options:\n"],
    [ 'verbose|v',  "print extra stuff"            ],
    [ 'help',       "print usage message and exit" ],
	[ $details ],
);
my $ARGC = $#ARGV+1;

say($usage->text), exit if $opt->help;
sub vsay { CORE::say(@_) if $opt->verbose; }

say("warning: still in production, only man available");

return system("/usr/bin/man",@ARGV);


