#!/usr/bin/perl

use warnings;
use strict;
use v5.20;
no warnings 'experimental';
no warnings 'experimental::signatures';
use vars qw( $fpid $pfid $plfid );
use constant {
				_OK		=> 	"No Errors",
				_ERR	=>	"Error (Generic/Undefined)",
			};


$plfid=$0;
$0 =~ s/^.*\///g;
$pfid=$0;
my $fpid=fork();
if ($fpid == 0) { 
	given($pfid) {
		when (/mfork/) {
			system($_) for @ARGV;
		}
		when (/pfork/) {
			my @cmdlines=( );
			my $curlist=[ ];
			my $curlist_needs_pushed=0;
			for (@ARGV) {
				unless (m/\A\s*-\s*\z/g) {
					push (@$curlist, $_);
					$curlist_needs_pushed=1;
				} else {
					push(@cmdlines,$curlist);
					$curlist=[ ];	# re-assign a new segment of memory
					$curlist_needs_pushed=0;
				}
			}
			push(@cmdlines,$curlist) if $curlist_needs_pushed;
			my $n=0;
			for my $curcmdline (@cmdlines)	{
				system( @$curcmdline );
			}				
		}
		default {
			system @ARGV; 
		}
	}
} else {
	say("error state: " . ( $? == 0 ? _OK : _ERR )) if $pfid eq "dfork";
}
