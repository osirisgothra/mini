#!/bin/zsh
#
#    scunits
#    list systemctl units, with cache if wanted
#    mini
#    mini.git/eso/ubin-local
#
#    Copyright (C) 1995-2020 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository:
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Sun 13 Sep 2020 09:43:27 AM EDT
#            osirisgothra@ initially created this file
#            with the original name, scunits
#
#  (this template+header was created using the template generator by Gabriel T. Sharp)
#




# Get Options from Command Line for scunits 

declare -ga opts
declare -gi quiet_level=0
declare -g version_text="$(tput setaf 124)scunits$(tput sgr0) Version 1.0 (C)2020 Gabriel T. Sharp, Licensed under GNU LGPL3 at https://gpl.gnu.org/gpl3.html"
declare -g help_text="scunits
list systemctl units, with cache if wanted

SYNTAX

    scunits [OPTIONS] PATTERN

OPTIONS
    --help    -h   show this help text
 --version    -V   display version information and exit (also shows license info)
 --reverse    -v   show items that do NOT match the given pattern (a pattern is required, of course)
   --quiet    -q   increase quiet level by one (quiet level is always zero if left alone)
--no-cache    -n   do not use (replace) cache if found (cache is removed after a system restart from tmp)
--reverse-all -R   see below about (--reverse) and patterns.

PATTERN

    A regular expression to use in the search, otherwise all ('.*') are shown. If -v is used, it will be reversed
    but only when a pattern is present. If no pattern is present, but -v is used, everything will still be shown
    because there was no pattern to reverse (this is intended). You can set --reverse-all to force it to show
    nothing when no pattern is present.

    The special word 'purge-unit-cache' will cause just the cache to be removed and exit (whether or not it actually
    exists is irrelevant, it will still try to remove it even if it is not accessable.

LICENSE
    GNU LGPL3 is available in full at the GNU GPL website, or through the google voice command 'show me GNU LGPL VERSION 3'

"
# extra args for grep
declare -ga extra_args=( )


# functions

units()
{
	[[ $# -eq 0 ]] && set -- show
	# syntax: units	show		list units and cache, or, list units from cache (the word 'show' is optional)
	#     or: units remove		remove cachefile and output nothing

	# unit cache is a per-user thing
	_cachefile=/tmp/units.cache.`whoami`.tmp
	case $1 in
		remove)	rm -fr $_cachefile;;
		show)
			if ! [[ -r $_cachefile ]]; then
				systemctl list-units --all --no-legend --no-pager | awk '{ printf $1"\n"; }' > $_cachefile
			fi
			cat $_cachefile;;
		*)	echo "ERROR: $0 $@ -- $? $pipestatus : called case option $1 is not valid (must be remove or show)"
			exit 127;;
	esac
}

eecho() { [[ $quiet_level -gt 10 ]] && echo "$*" > /dev/stderr; }

echo() {
	if [[ $quiet_level -gt 0 ]]; then
		return 127
	else
		builtin echo "$@"
	fi
}

declare -gi mega_none=0
if opts=( `getopt -n $0 -o hvqnVR -l no-cache,reverse,reverse-all,help,version,quiet -- "$@"` ); then
	eval set -- "${opts[@]}"
	while [[ $# -ge 0 ]]; do
		curopt=$1
		nextopt=${2-none}
		shift
		# handle --options and -o ptions here
		case $curopt in
			--no-cache|-n)	units remove;;
			--help|-h)	echo "$help_text"; exit 127;;
			--version|-V) echo "$version_text"; exit 127;;
			--quiet|-q) let quiet_level++;;
			--reverse|-v) extra_args=( "-v" );;
			--reverse-all|R) extra_args=( "-v" ); mega_none=1;;
			--) eecho "done with options"; break;;
			*)	eecho "handling option: $curopt (next:$nextopt)";;
		esac
	done

# TODO: future use may be for sanitizing patterns to be more secure, but not needed at this time
 	for arg; do
 		# verify/handle non-option arguments
 		case $arg in
			purge-unit-cache) units remove; echo "purged cache file";  exit $?;;
			*) :;
 			#*)	echo "handling argument: $arg";;
 		esac
 	done

else
	echo "error, code is $?, exiting with fail"
fi

# syntax: scunits [options]			just lists all units (see help about how patterns are affected by mega_none (aka --reverse-all))
#     or: scunits PATTERN			use regular expression to filter pattern
case $# in
	0)  ((mega_none==0)) && units;;
	*)	units | grep $extra_args -P "$*";;
esac

