#!/bin/zsh
#
#    colormap
#    show that 256 color cube, unwrapped into little 
#    mini
#    eso-ubin-local
#
#    Copyright (C) 1995-2021 Gabriel T. Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all projects can be
#    obtained by visiting the repository at:
#
#    <https://github.com/osirisgothra>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Sat 15 May 2021 10:03:52 AM EDT
#            osirisgothra@ initially created this file
#            with the original name, colormap
#
#
#
#  This template and header was created using the template generator by Gabriel T. Sharp
#  You can download the latest version at: <https://www.github.com/osirisgothra/mini.git/eso/ubin-local/template>
#  (the url is subject to changes on github's behalf, please submit a pull request to fix or request a fix on any url changes)
#


# Get Options from Command Line for colormap

declare -ga opts
declare -gi quiet_level=0
declare -g version_text="$(tput setaf 124)colormap$(tput sgr0) Version 1.0 (C)2020 Gabriel T. Sharp, Licensed under GNU LGPL3 at https://gpl.gnu.org/gpl3.html"
declare -g help_text="colormap
show the 256 color cube, unwrapped into tables

SYNTAX

	colormap [OPTIONS] ARGUMENTS

OPTIONS
	--help -h	show this help text
 --version -v   display version information and exit (also shows license info)
   --quiet -q   increase quiet level by one (quiet level is always zero if left alone)

ARGUMENTS

    Although the structure of the programming is set to, in the future, allow for
    non-option arguments to be supplied on the command line, at this time there are
    none. However, this could change in the future at any time.

PROJECT

    This program is one of many in the 'mini' project, which is just all the small individual
    scripts I have written over the years. I try to write in any supporters or original sources
    where they are. If you find any code that you think is yours or is uncredited, please feel
    free to request removal or crediting where it is due. (however very unlikely since most of
    the code is written from scratch). 

MY RANDOM WISDOM

    As of 2021, algorithims and methods of data retrieval does
    not comprise theft. There are alot of people these days who are thinking up the same ideas
    in paralell (there are 6 billion + people on the planet) so they shouldn't think it odd when
    someone else thinks of the same thing. I have personally run into many duplicate look-alikes
    when working with very small projects. We need to all remember that we are all human and
    also (gasp) think alike because of that. There is a growing number of people suing each other
    because 'they thought of that first' or some crap like that. If you think of 1+1=2 and someone
    in another country thinks of it too, it is not theft.. come on people.

LICENSE

	GNU LGPL3 is available in full at the GNU GPL website, or through the google voice command 'show me GNU LGPL VERSION 3'

"
lecho() { builtin echo "$@"; }
                 row="values"

echo() {
	if [[ $quiet_level -gt 0 ]]; then
		return 127
	else
		builtin echo "$@"
	fi
}

is() {
    case $1 in
        quiet)  ((quiet_level > 0));;
      verbose)  ((quiet_level < 0));;
       normal)  ((quiet_level == 0));;
     notquiet)  ((quiet_level <= 0));;
            *)  ((quiet_level == 1));;
    esac
}

if opts=( `getopt -n $0 -o hvqV -l verbose,help,version,quiet -- "$@"` ); then
	eval set -- "${opts[@]}"
	while [[ $# -ge 0 ]] {
		curopt=$1
		nextopt=${2-none}
		shift
		# handle --options and -o ptions here
		case $curopt in
			--help|-h)	echo "$help_text"; exit 127;;
			--version|-v) echo "$version_text"; exit 127;;
            --verbose|-V) let quiet_level--;;
			--quiet|-q) let quiet_level++;;
			--) is verbose && echo "} with options";  break;;
			*)	is verbose && echo "handling option: $curopt (next:$nextopt)";;
		esac
	}
	for arg {
		# verify/handle non-option arguments
		case $arg in
			*)	is verbose && echo "handling argument: $arg";;
		esac
	}

else
	is notquiet && echo "error, code is $?, exiting with fail"
fi


function termcolors ()
{
    zmodload zsh/terminfo    

     print -P "TERMINAL (8 color values, 16 when %Bbright/bold%b is supported, 24 when ${terminfo[dim]}dim${terminfo[sgr0]} is supported)"
     #print -P "Foreground: >â**<"
     #print -P "Background: >%Sâ**%s<\n"

     print "      0 1 2 3 4 5 6 7"
     for b (0 1) {
             printf "%d %2d " $b $(( 8 * b ))
             for r (0 1 2 3 4 5 6 7) {
                 c=$(( 8 * b + r ))
                 print -nP "%K{$c}  %k"
             }
         printf " %2d\n" $(( 8 * b + 7 ))
     }
     print -P "\n%F{1}R%F{2}G%F{3}B%f values\n"
     for r (0 1 2 3 4 5) {
         print "Red Saturation = $r ($(( 16 + 36 * r )) thru $(( 16 + 36 * r + 35 )))\n       - offsets -\n       0  1  2  3  4  5"
         for g (0 1 2 3 4 5) {
             printf "%d %3d " $g $(( 16 + 36 * r + 6 * g ))
             for b (0 1 2 3 4 5) {
                 c=$(( 16 + 36 * r + 6 * g + b ))
                 print -nP "%K{$c}  %k "
             }
             printf " %3d   ${row: $g:1}\n" $(( 16 + 36 * r + 6 * g + 5))
         }
         print
     }
     print
     print GRAY
     for g ({0..23}) {
         c=$(( 232 + g ))
         printf "%2d %3d " $g $c
         print -P "%K{$c}  %k"
     }
}
termcolors $@