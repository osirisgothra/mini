#!/bin/bash
#
#    template
#    template generator
#    template generator project
#    a project for generating templates
#
#    Copyright (C) 1995-2018 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Sun Apr 22 12:22:01 EDT 2018
#            osirisgothra@larnica initially added a template to this file
#            with the original name, template*
#
#  * this file has existed well before this date (2-3 years at least), but is 
#    now documented as being truly created at this date and time
#
#  (this header was created using the template generator by Gabriel T. Sharp)
#
# DATE_TIME: not sure why you need to change this really but if you forgot or something, or are on 
#            a deadline or have a specific release date it could be useful.
#
# TODOs (ordered in MOST-IMPORTANT To least-important)
#	#1 --- VERY ---> implement X integration to take values for $1 thru $6 since most
#                    will probably have an X manager running that supports at the least
#                    floating or stacked windows, decide on whether we should use one of:
#                    kdialog, zenity, gnome-dialog (but not dialog because thats CUI).
#                    (we cant use any CUI input methods because they interfere with CUI editors!)
# TODOs that are DONE
#	#2 ---  done--> possibly put template in a system or user binpath, possibly on eso??
#   #3 --- done --> put into esoteric ubin for testing on github???
#   #4 --- done --> add templates that the user can pick for other licenses or filetypes

# defaults
[[ $# -lt 1 ]] && FILENAME="<file>" || FILENAME="$1"
[[ $# -lt 2 ]] && DESCRIPTION="A ${FILENAME^} Program" || DESCRIPTION="$2"
[[ $# -lt 3 ]] && PROJECT_NAME="The ${FILENAME^} Project / eso-bin" || PROJECT_NAME="$3"
[[ $# -lt 4 ]] && PROJECT_DESCRIPTION="A Project That Gloriously Houses ${FILENAME^} / esoteric projects and scripts" || PROJECT_DESCRIPTION="$4"
[[ $# -lt 5 ]] && MYSHELL="/bin/bash" || MYSHELL="$5"
[[ $# -lt 6 ]] && DATE_TIME="$(date)" || DATE_TIME="$6"

if ! [[ -r "$MYSHELL" ]]; then
	if [[ -r "$(which "$MYSHELL")" ]]; then
		# user specified a name in PATH, use it
		MYSHELL="$(which "$MYSHELL")"
	fi		
fi
# base name of executable, for getting language specific data
# in the default case, '/bin/bash' would be 'bash'
# or '/usr/bin/perl' would be 'perl'
# users can be
MYLANG=$(basename $MYSHELL)

cat <<MY_EXTREME_END_OF_FILE
#!${MYSHELL}
#
#    $FILENAME
#    $DESCRIPTION
#    $PROJECT_NAME
#    $PROJECT_DESCRIPTION
#
#    Copyright (C) 1995-2018 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 $DATE_TIME
#            ${USER}@${HOSTNAME} initially created this file
#            with the original name, $FILENAME
#
#  (this header was created using the template generator by Gabriel T. Sharp)
#
#
MY_EXTREME_END_OF_FILE

critical() { echo "critical error ($caller): ${1-corrupted state}";  (( $# > 1 )) && shift; exit $1; }

Z=$(( COLUMNS / 2 ))
echo "# TARGET NOTES"
echo "#"

foundit=0
item=${1}
for x in $(echo ${PATH//~/$HOME} | sed 's/:/ /g' ); do 
	nx="${x}/${item}"
	if [[ -r "$nx" ]]; then		
		copies+=( "$nx" )
	fi
done
case ${#copies[@]} in
	1) copykind=single;;
	0) copykind=new;;
	*) echo "several copies found, make them all executable"
       echo "${copies[@]}"
	   select n in yes no abort/quit; do ((REPLY)) && break
		   echo "incorrect choice!"
		   echo "please enter a choice listed above."
    	done	 
		case $n in
			1)	copykind=multi;;
			2)  copykind=none;;
			3)  exit 165;;
			*)  critical 166;;
		esac
		;;
esac
case $copykind in
	none) echo "not marking any files executable";;
	new) echo "marking new file executable";;&
	single) echo "marking single existing file executable";;&
	multi) echo "marking all files executable";;&
	*)	for ci in "${copies[@]}"; do sudo chmod -v a+x "$ci"; done;;
esac	
echo "completed ($?)"


#!/bin/bash

# A small example program for using the new getopt(1) program.
# This program will only work with bash(1)
# An similar program using the tcsh(1) script language can be found
# as parse.tcsh

# Example input and output (from the bash prompt):
# ./parse.bash -a par1 'another arg' --c-long 'wow!*\?' -cmore -b " very long "
# Option a
# Option c, no argument
# Option c, argument `more'
# Option b, argument ` very long '
# Remaining arguments:
# --> `par1'
# --> `another arg'
# --> `wow!*\?'

# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=`getopt -o ab:c:: --long a-long,b-long:,c-long:: \
     -n 'example.bash' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-a|--a-long) echo "Option a" ; shift ;;
		-b|--b-long) echo "Option b, argument \`$2'" ; shift 2 ;;
		-c|--c-long)
			# c has an optional argument. As we are in quoted mode,
			# an empty parameter will be generated if its optional
			# argument is not found.
			case "$2" in
				"") echo "Option c, no argument"; shift 2 ;;
				*)  echo "Option c, argument \`$2'" ; shift 2 ;;
			esac ;;
		--) shift ; break ;;
		*) echo "Internal error!" ; exit 1 ;;
	esac
done
echo "Remaining arguments:"
for arg do echo '--> '"\`$arg'" ; done
