#!/bin/zsh
#
#    template
#    template generator
#    template generator project
#    a project for generating templates
#
#    NOTICE: this is NOT the template block, it is down below in the code!
#
#    Copyright (C) 1995-2018 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Sun Apr 22 12:22:01 EDT 2018
#            osirisgothra@larnica initially added a template to this file
#            with the original name, template*
#  	 Sun 05 May 2019 11:09:39 AM EDT
#   
#
#  * this file has existed well before this date (2-3 years at least), but is A
#    now documented as being truly created at this date and time
#
#  (this header was created using the template generator by Gabriel T. Sharp)
#
# DATE_TIME: not sure why you need to change this really but if you forgot or something, or are on 
#            a deadline or have a specific release date it could be useful.
#
# TODOs (ordered in MOST-IMPORTANT To least-important)
#	#1 --- VERY ---> implement X integration to take values for $1 thru $6 since most
#                    will probably have an X manager running that supports at the least
#                    floating or stacked windows, decide on whether we should use one of:
#                    kdialog, zenity, gnome-dialog (but not dialog because thats CUI).
#                    (we cant use any CUI input methods because they interfere with CUI editors!)
# TODOs that are DONE
#	#2 ---  done--> possibly put template in a system or user binpath, possibly on eso??
#   #3 --- done --> put into esoteric ubin for testing on github???
#   #4 --- done --> add templates that the user can pick for other licenses or filetypes

# defaults
[[ $# -lt 1 ]] && FILENAME="<file>" || FILENAME="$1"
[[ $# -lt 2 ]] && DESCRIPTION="A ${(U)FILENAME} Program" || DESCRIPTION="$2"
[[ $# -lt 3 ]] && PROJECT_NAME="mini/eso" || PROJECT_NAME="$3"
[[ $# -lt 4 ]] && PROJECT_DESCRIPTION="small projects and stand-alone programs or documents, esoteric or dependant" || PROJECT_DESCRIPTION="$4"
[[ $# -lt 5 ]] && MYSHELL="/bin/bash" || MYSHELL="$5"
[[ $# -lt 6 ]] && DATE_TIME="$(date)" || DATE_TIME="$6"
ARG_USED=$#
ARG_UNUSED=0
CREATED_NOTES="template program under renovation"
TARGET_NOTES="# TARGET NOTES
#
# 	EXECUTIVE STATE CHANGES
#		marking single existing file executable
#			- mode of '$FILENAME' changed to u+rwx/og+rx.. [$C]
#		completed (0)
# 	ARGUMENTUAL ANALYSIS
#       remaining arguments:
#			${REMARGS-no arguments to list}
#       disposition:
#			${ARG_USED-all} were used during execution of template
#   		${ARG_UNUSED-none} were extra and/or unexpected
# 	TEMPLATE SUMMARY OF GENERATION
#	     outcome: ${OUTCOME-good}
#	     errors: ${SERRORS-0}
# 	FINAL NOTE
#	     ${CREATED_NOTES-completed without any significant problems}
#        you should REMOVE the TARGET NOTES section once youve reviewed this!
#		 ($(date)): $(id -un) ignored the final note and left this behind for
#		           the user(s) to see, how embarassed I am for the author!
#"
if ! [[ -r "$MYSHELL" ]]; then
	if [[ -r "$(which "$MYSHELL")" ]]; then
		# user specified a name in PATH, use it
		MYSHELL="$(which "$MYSHELL")"
	fi
fi
# base name of executable, for getting language specific data
# in the default case, '/bin/bash' would be 'bash'
# or '/usr/bin/perl' would be 'perl'
# users can be
MYLANG=$(basename $MYSHELL)

critical() { echo "critical error ($caller): ${1-corrupted state}";  (( $# > 1 )) && shift; exit $1; }

Z=$(( COLUMNS / 2 ))

foundit=0
item=${1}
for x in $(echo ${PATH//~/$HOME} | sed 's/:/ /g' ); do 
	nx="${x}/${item}"
	if [[ -r "$nx" ]]; then		
		copies+=( "$nx" )
	fi
done

for ci in "${copies[@]}"; do
	#if [[ -f "$ci" ]]; then
		#echo -ne "#	"; sudo chmod -v a+x "$ci" | tr '\n' ',' && CMOK="SUCCEEDED" || CMOK="FAILED ON AT LEAST ONE OR MORE FILES"
		#echo "#	"
	#else
	#	echo "#	file $ci didnt exist, skipped it"
	#fi
done



cat <<MY_EXTREME_END_OF_FILE
#!${MYSHELL}
#
#    $FILENAME
#    $DESCRIPTION
#    $PROJECT_NAME
#    $PROJECT_DESCRIPTION
#
#    Copyright (C) 1995-2018 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 $DATE_TIME
#            ${USER}@${HOSTNAME} initially created this file
#            with the original name, $FILENAME
#
$TARGET_NOTES
#
#  (this template+header was created using the template generator by Gabriel T. Sharp)
#




# Get Options from Command Line for $1 

declare -ga opts
declare -gi quiet_level=0
declare -g version_text="\$(tput setaf 124)$1\$(tput sgr0) Version 1.0 (C)2020 Gabriel T. Sharp, Licensed under GNU LGPL3 at https://gpl.gnu.org/gpl3.html"
declare -g help_text="$1
$2

SYNTAX

	$1 [OPTIONS] ARGUMENTS

OPTIONS
	--help -h	show this help text
 --version -v   display version information and exit (also shows license info)
   --quiet -q   increase quiet level by one (quiet level is always zero if left alone)

ARGUMENTS

	FILENAME	A filename that must exist or be writable by the current user.
	PATHNAME	A relative or absolute path that must exist or be creatable.
	STRING		A readable string, it must not contain any unreprintable characters.
	NUMBER		An integer, usually between -32767 and 32767.
	BOOLEAN		A true/false value, represented as 0 for false, and any other value for true.
	FLOAT		A floating point single or double precision value, it is precise down to about 5 ot 6 decimal places.
	ENG			Scientific notation, expressed in powers (3x10^4 is written as 3.4)
	DEG			Like GRAD/RAD, but expressed in degrees (hours, minutes, seconds) so 3 5'5\" is written as \"3.5.5\" 


LICENSE

	GNU LGPL3 is available in full at the GNU GPL website, or through the google voice command 'show me GNU LGPL VERSION 3'

"

echo() {
	if [[ \$quiet_level -gt 0 ]]; then
		return 127
	else
		builtin echo "\$@"
	fi
}

if opts=( \`getopt -n \$0 -o hvq -l help,version,quiet -- "\$@"\` ); then
	eval set -- "\${opts[@]}"
	while [[ \$# -ge 0 ]]; do
		curopt=\$1
		nextopt=\${2-none}
		shift
		# handle --options and -o ptions here
		case \$curopt in
			--help|-h)	echo "\$help_text"; exit 127;;
			--version|-v) echo "\$version_text"; exit 127;;
			--quiet|-q) let quiet_level++;;
			--) echo "done with options"; break;;
			*)	echo "handling option: \$curopt (next:\$nextopt)";;
		esac	
	done
	for arg; do
		# verify/handle non-option arguments
		case \$arg in
			*)	echo "handling argument: \$arg";;
		esac
	done		
	
else
	echo "error, code is \$?, exiting with fail"
fi




MY_EXTREME_END_OF_FILE


echo "#	template output completed (code=$([[ $? -ne 0 ]] && echo $? || echo 'OK(ERROR_NONE)' ))\n#\n#"
















