#!/bin/zsh
#
#    kgrep
#    its pgrep and kill in one, signal defaults to -KILL
#    mini/eso
#    small projects and stand-alone programs or documents, esoteric or dependant
#
#    Copyright (C) 1995-2021 Gabriel T. Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all projects can be
#    obtained by visiting the repository at:
#
#    <https://github.com/osirisgothra>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Tue 22 Jun 2021 10:16:58 AM EDT
#            osirisgothra@ initially created this file
#            with the original name, kgrep
#
#
#
#  This template and header was created using the template generator by Gabriel T. Sharp
#  You can download the latest version at: <https://www.github.com/osirisgothra/mini.git/eso/ubin-local/template>
#  (the url is subject to changes on github's behalf, please submit a pull request to fix or request a fix on any url changes)
#


# Get Options from Command Line for kgrep

declare -ga opts
declare -gi quiet_level=0
declare -g version_text="$(tput setaf 124)kgrep$(tput sgr0) Version 1.0 (C)2020 Gabriel T. Sharp, Licensed under GNU LGPL3 at https://gpl.gnu.org/gpl3.html"
declare -g help_text="kgrep
its pgrep and kill in one, signal defaults to -KILL

SYNTAX

	kgrep [OPTIONS] [--SIGNAL] PROCESS_NAME_AS_REGEX [...]

OPTIONS
	--help -h	show this help text
 --version -v   display version information and exit (also shows license info)
   --quiet -q   increase quiet level by one (quiet level is always zero if left alone)

ARGUMENTS

    Must be a process name using a regular expression or partial or full process name.
    Signals can be specified, but --KILL is the default

LICENSE

	GNU LGPL3 is available in full at the GNU GPL website, or through the google voice command 'show me GNU LGPL VERSION 3'

"
lecho() { builtin echo "$@"; }

echo() {
	if [[ $quiet_level -gt 0 ]]; then
		return 127
	else
		builtin echo "$@"
	fi
}

is() {
    case $1 in
        quiet)  ((quiet_level > 0));;
      verbose)  ((quiet_level < 0));;
       normal)  ((quiet_level == 0));;
     notquiet)  ((quiet_level <= 0));;
            *)  ((quiet_level == 1));;
    esac
}
SIGNAL="-KILL"

if opts=( `getopt -n $0 -o hvqV -l HUP,INT,QUIT,ILL,TRAP,ABRT,BUS,FPE,KILL,USR1,SEGV,USR2,PIPE,ALRM,TERM,STKFLT,CHLD,CONT,STOP,TSTP,TTIN,TTOU,URG,XCPU,XFSZ,VTALRM,PROF,WINCH,POLL,PWR,SYS,verbose,help,version,quiet -- "$@"` ); then
	eval set -- "${opts[@]}"
	while [[ $# -ge 0 ]]; do
		curopt=$1
		nextopt=${2-none}
		shift
		# handle --options and -o ptions here
		case $curopt in
			--help|-h)	echo "$help_text"; exit 127;;
			--version|-v) echo "$version_text"; exit 127;;
            --verbose|-V) let quiet_level--;;
			--quiet|-q) let quiet_level++;;
			HUP) SIGNAL="-HUP";;
			INT) SIGNAL="-INT";;
			QUIT) SIGNAL="-QUIT";;
			ILL) SIGNAL="-ILL";;
			TRAP) SIGNAL="-TRAP";;
			ABRT) SIGNAL="-ABRT";;
			BUS) SIGNAL="-BUS";;
			FPE) SIGNAL="-FPE";;
			KILL) SIGNAL="-KILL";;
			USR1) SIGNAL="-USR1";;
			SEGV) SIGNAL="-SEGV";;
			USR2) SIGNAL="-USR2";;
			PIPE) SIGNAL="-PIPE";;
			ALRM) SIGNAL="-ALRM";;
			TERM) SIGNAL="-TERM";;
			STKFLT) SIGNAL="-STKFLT";;
			CHLD) SIGNAL="-CHLD";;
			CONT) SIGNAL="-CONT";;
			STOP) SIGNAL="-STOP";;
			TSTP) SIGNAL="-TSTP";;
			TTIN) SIGNAL="-TTIN";;
			TTOU) SIGNAL="-TTOU";;
			URG) SIGNAL="-URG";;
			XCPU) SIGNAL="-XCPU";;
			XFSZ) SIGNAL="-XFSZ";;
			VTALRM) SIGNAL="-VTALRM";;
			PROF) SIGNAL="-PROF";;
			WINCH) SIGNAL="-WINCH";;
			POLL) SIGNAL="-POLL";;
			PWR) SIGNAL="-PWR";;
   			SYS) SIGNAL="-SYS";;
			--) is verbose && echo "done with options";  break;;
			*)	is verbose && echo "handling option: $curopt (next:$nextopt)";;
		esac
	done
	for arg; do
		# verify/handle non-option arguments
		case $arg in
			*)	is verbose && echo "handling argument: $arg";;
		esac
	done
else
	is notquiet && echo "error code is $?, exiting with fail"
fi

declare -ga items=( `pgrep $@` )
for item in $items; do 
    echo "using kill $SIGNAL on $item"
    kill $SIGNAL $item
done








