#!/bin/bash
#
#    bmym
#    start mym in background with no output, and wait to kill it when second java instance starts
#    esobin
#    esoteric projects
#
#    Copyright (C) 1995-2018 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Mon Nov 19 09:15:01 EST 2018
#            osirisgothra@larnica initially created this file
#            with the original name, bmym
#
#  (this header was created using the template generator by Gabriel T. Sharp)
#
# NOTES
#
#   #1  'kill -KILL $JAVAPID'
#
#       must use SIGKILL (-KILL) because if we use SIGINT (default)
#       or a signal that java can catch or handle gracefully, it will
#       have a chance to kill it's child first and we dont want that
#       warning: this command may cause system harm so dont use if
#       you are not sure of the risks, or dont want to risk it. Not
#       responsible for damange caused by this command! (you can either
#       lose data if another java instance runs inbetween our instances)
#       this is meant for systems that dont run other java instances for
#       other programs on a regular basis and definitely NOT FOR MULTIUSER
#       SERVER USE, though the only thing killed is the process we started
#       its still not recommended for that kind of use without some tweaking
#       on your part!
#
#
# TARGET NOTES
#
# target resides in /home/osirisgothra/bin ... [0Gno
# target resides in /home/osirisgothra/bin ... [0Gno
# target resides in /usr/local/sbin ... [0Gno
# target resides in /usr/local/bin ... [0Gno
# target resides in /usr/sbin ... [0Gno
# target resides in /usr/bin ... [0Gno
# target resides in /sbin ... [0Gno
# target resides in /bin ... [0Gno
# target resides in /usr/games ... [0Gno
# target resides in /usr/local/games ... [0Gno
# target resides in ~/bin ... [0Gno
# target resides in /usr/local/gxdwm ... [0Gno
#
# target notes are generated for the project manager and can be safely deleted
#
set -x
SECONDS=0
TIMEOUT_MIN=5
TIMEOUT_SEC=30
TIMEOUT=$(( (TIMEOUT_MIN*60) + (TIMEOUT_SEC) ))
TARGET_CMD="mym"
TARGET_LOC="${HOME}/bin/$TARGET_CMD"
JAVACOUNT=`pidof java | wc -w`
# 1(mym) + JAVACOUNT(other java instances) + 1(second instance)
JAVATANGENT=$[ 1 + $JAVACOUNT + 1 ]
"$TARGET_LOC" &> /dev/null &
JAVAPID=`jobs -rp %-1`
disown %
while true; do
	CJC=`pidof java | wc -w`
	[[ $CJC -ge $JAVATANGENT ]] && TR=0 && break
	[[ $SECONDS -ge $TIMEOUT ]] && TR=1 && break
done
case $TR in
	0)	# timeout not reached, java limit has happened and we can kill it
		echo "second java process started, now killing it's parent (SIGKILL)"
		kill -KILL $JAVAPID
		;;
	1)	# timeout reached, java limit never happened, but we cant wait any longer
		# so we do nothing
		echo "timeout reached ($TIMEOUT seconds)"
		echo "not waiting any further"
		echo "change this in $BASH_SOURCE and edit TIMEOUT_MIN and TIMEOUT_SEC"
		;;
esac
echo "script has completed (with code $? ${PIPESTATUS[@]})"
