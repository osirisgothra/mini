#!/usr/bin/env zsh
#
#    lls
#    long directory listing
#    mini
#    esoteric scripts and projects
#
#    Copyright (C) 1995-2018 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#     Sat 04 Jul 2020 11:20:18 AM EDT
#            osirisgothra@ initially created this file
#            with the original name, lls
#
# TARGET NOTES
#
#     EXECUTIVE STATE CHANGES
#        marking single existing file executable
#            - mode of 'lls' changed to u+rwx/og+rx.. []
#        completed (0)
#     ARGUMENTUAL ANALYSIS
#       remaining arguments:
#            no arguments to list
#       disposition:
#            5 were used during execution of template
#           0 were extra and/or unexpected
#     TEMPLATE SUMMARY OF GENERATION
#         outcome: good
#         errors: 0
#     FINAL NOTE
#         template program under renovation
#        you should REMOVE the TARGET NOTES section once youve reviewed this!
#         (Sat 04 Jul 2020 11:20:18 AM EDT): osirisgothra ignored the final note and left this behind for
#                   the user(s) to see, how embarassed I am for the author!
#
#
#  (this template+header was created using the template generator by Gabriel T. Sharp)
#

#### TEST HELP
cat - <<EOF
Usage: test EXPRESSION

COMPARISONS
  ( EXPR ) !EXPR    tests EXPR is true, false, respectively.
  EXPR1 -a EXPR2    compare EXPRs with logical and(-a) and or(-o).
  EXPR1 -o EXPR2    either EXPR1 or EXPR2 is true.
  [-z-n] STR        tests length, is zero (-z) or nonzero (-n or none).
  STR1 [op] STR2    compare op is =(equal) or !=(notequal).
  NUM1 [op] NUM2    compare op is ge(>=), gt(>), le(<=), lt(<), ne(!=).
  FILE1 -[op] FILE2 file comp, op is ef(== dev/node#) nt(newer) ot(older).
  -[op] FILENAME    test file for attribute or status (see below).
  -l STR			replaces values for 'NUM' with length of string STR.
  
FILE TESTS
  b   is block special                c   is character special
  d   is directory                    e   exists
  f   regular file                    g   has SGID bit
  G   owned by current EGID           h,L   symbolic link
  k   has sticky bit                  O   owned by current EUID 
  p   a named pipe                    r   can read data from
  s   has a size that is nonzero      S   is a socket special file
  t   is an FD opened on a tty        u   has SUID bit set
  w   can write data to               x   can be executed/listed


EOF

# Get Options from Command Line for lls 

declare -ga opts
declare -gi quiet_level=0
declare -g version_text="$(tput setaf 124)lls($0)$(tput sgr0) Version 1.0 (C)2020 Gabriel T. Sharp, Licensed under GNU LGPL3 at https://gpl.gnu.org/gpl3.html"
declare -g help_text="lls (executable name=$0)
  long directory listing

SYNTAX

    lls [OPTIONS] ARGUMENTS

OPTIONS
    --help -h    show this help text
 --version -v   display version information and exit (also shows license info)
   --quiet -q   increase quiet level by one (quiet level is always zero if left alone)

ARGUMENTS

	The argument is one of the following catagories:

    FILENAME     A filename that must exist or be writable by the current user.
    PATHNAME     A relative or absolute path that must exist or be creatable.
    STRING       A readable string, it must not contain any unreprintable characters.

                    - No string directives are used in this program yet.

    NUMBER       An integer, usually between -32767 and 32767:

                    - Negative numbers will be interpreted as tail(1) counts as will be applied.
                    - Positive numbers are the opposite, so head(1) would be used.

    BOOLEAN      A true/false value, represented as 0 for false, and any other value for true.
       
                    - Boolean values are not used in this program yet.

    FLOAT        A floating point single or double precision value, it is precise down to about 5 ot 6 decimal places.
    ENG            Scientific notation, expressed in powers (3x10^4 is written as 3.4)
    DEG            Like GRAD/RAD, but expressed in degrees (hours, minutes, seconds) so 3 5'5\" is written as \"3.5.5\" 
				
                     - There are no special numbers used as arguments in this program yet.




LICENSE

    GNU LGPL3 is available in full at the GNU GPL website, or through the google voice command 'show me GNU LGPL VERSION 3'

"

declare -gi prompt_level=1

echo() {
    if [[ $quiet_level -gt 0 ]]; then
        return 127
    else
        builtin echo "$@"
    fi
}

if opts=( `getopt -n $0 -o hvq -l help,version,quiet -- "$@"` ); then
    eval set -- "${opts[@]}"
    while [[ $# -ge 0 ]]; do
        curopt=$1
        nextopt=${2-none}
        shift
        # handle --options and -o ptions here
        case $curopt in
			--prompt|-p)	let prompt_level--;; 
            --help|-h)    echo "$help_text"; exit 127;;
            --version|-v) echo "$version_text"; exit 127;;
            --quiet|-q) let quiet_level++;;
            --) break;;
            *)    echo "handling option: $curopt (next:$nextopt)";;
        esac    
    done
    for arg; do
        # verify/handle non-option arguments
        case $arg in
			
            *)	break;;
					
        esac
    done        
    
else
    echo "error, code is $?, exiting with fail"
fi




#    template output completed (code=OK(ERROR_NONE))
#
#
ls -l "$@" --color