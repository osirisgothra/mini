#!/usr/bin/env perl
#
#    starter
#    program starter hub
#    eso projects
#    esoteric project group
#
#    Copyright (C) 1995-2018 Gabriel Thomas Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all of my projects can be
#    obtained by visiting the repository: 
#
#    <https://github.com/osirisgothra>
#
#    Because of the global availability of github at this point, hosting
#    any additional servers for public use no longer serves a purpose. All
#    content is available 24/7 through github. (Thanks to GITHUB!).
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Mon Dec 10 07:50:12 EST 2018
#            osirisgothra@larnica initially created this file
#            with the original name, starter
#
#  (this header was created using the template generator by Gabriel T. Sharp)
#
#
# TARGET NOTES
#
# target resides in /home/osirisgothra/bin * (TODO: safely delete these lines up to TARGET NOTES)
#

# hub
use warnings;
use v5.20;
use strict;
use Path::Tiny qw( tempfile );
use POSIX qw( mkfifo );
sub execute {
	# execute item or set of items
	# items are executed sequentally, one after the other ends
	# this procedure is done in the background
	# returns: pid of executioner
	unless (fork()) {
		qx! $_ ! for @_;
	}
}
my $finame = tempfile;
my $fiok=0;
$finame->remove() if $finame->exists();
say("using $finame to communicate with other programs");
mkfifo($finame,770) || die("cant make $finame into a fifo, aborting");
while ($fiok == 0) {
	say("waiting for call...");
   for my $item ($finame->lines()) {
		say "recieved: $item";  
		execute "$item";
	}
}




