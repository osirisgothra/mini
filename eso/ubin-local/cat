#!/bin/zsh
#!/bin/bash
#
#    cat
#    cat-files-to-assocated-program
#    mini
#    eso
#
#    Copyright (C) 1995-2021 Gabriel T. Sharp
#
#    Written by Gabriel T. Sharp <21shariria@gmail.com>
#    Latest versions of this and all projects can be
#    obtained by visiting the repository at:
#
#    <https://github.com/osirisgothra>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#    HISTORY
#
#	 Wed 16 Jun 2021 02:03:07 PM EDT
#            osirisgothra@ initially created this file
#            with the original name, cat
#
#
#
#  This template and header was created using the template generator by Gabriel T. Sharp
#  You can download the latest version at: <https://www.github.com/osirisgothra/mini.git/eso/ubin-local/template>
#  (the url is subject to changes on github's behalf, please submit a pull request to fix or request a fix on any url changes)
#


# Get Options from Command Line for cat

declare -ga opts
declare -gi quiet_level=1
declare -g version_text="$(tput setaf 124)cat$(tput sgr0) Version 1.0 (C)2020 Gabriel T. Sharp, Licensed under GNU LGPL3 at https://gpl.gnu.org/gpl3.html"
declare -g help_text="cat
cat-files-to-assocated-program

SYNTAX

	cat [OPTIONS] ARGUMENTS

OPTIONS
	--help -h	show this help text
 --version -v   display version information and exit (also shows license info)
   --quiet -q   increase quiet level by one (quiet level is always zero if left alone)

ARGUMENTS

	FILENAME	A filename that must exist or be writable by the current user.
	PATHNAME	A relative or absolute path that must exist or be creatable.
	STRING		A readable string, it must not contain any unreprintable characters.
	NUMBER		An integer, usually between -32767 and 32767.
	BOOLEAN		A true/false value, represented as 0 for false, and any other value for true.
	FLOAT		A floating point single or double precision value, it is precise down to about 5 ot 6 decimal places.
	ENG			Scientific notation, expressed in powers (3x10^4 is written as 3.4)
	DEG			Like GRAD/RAD, but expressed in degrees (hours, minutes, seconds) so 3 5'5\" is written as \"3.5.5\"


LICENSE

	GNU LGPL3 is available in full at the GNU GPL website, or through the google voice command 'show me GNU LGPL VERSION 3'

"
lecho() { builtin echo "$@"; }

echo() {
	if [[ $quiet_level -gt 0 ]]; then
		return 127
	else
		builtin echo "$@"
	fi
}

is() {
    case $1 in
        quiet)  ((quiet_level > 0));;
      verbose)  ((quiet_level < 0));;
       normal)  ((quiet_level == 0));;
     notquiet)  ((quiet_level <= 0));;
            *)  ((quiet_level == 1));;
    esac
}

if opts=( `getopt -n $0 -o hvqV -l verbose,help,version,quiet -- "$@"` ); then
	eval set -- "${opts[@]}"
	while [[ $# -ge 0 ]]; do
		curopt=$1
		nextopt=${2-none}
		shift
		# handle --options and -o ptions here
		case $curopt in
			--help|-h)	echo "$help_text"; exit 127;;
			--version|-v) echo "$version_text"; exit 127;;
            --verbose|-V) let quiet_level--;;
			--quiet|-q) let quiet_level++;;
			--) is verbose && echo "done with options";  break;;
			*)	is verbose && echo "handling option: $curopt (next:$nextopt)";;
		esac
	done
	for arg; do
		# verify/handle non-option arguments
		case $arg in
			*)	is verbose && echo "handling argument: $arg";;
		esac
	done

else
	is notquiet && echo "error, code is $?, exiting with fail"
fi

setopt interactivecomments
case $# in      
    0)  exec /bin/cat                                                                              #2
        ;;
    *)  declare -gA scores=(  )
        #coreup( binary )
        scoreup()
        {
            if [[ $# != 1 ]]; then
                echo "fatal: scoreup must have exactly 1 argument, not $# ($@)"
                exit
            else
                if [[ -n $scores[$1] ]]; then
                    eval "noglob let scores[$1]+=1"
                else
                    eval "noglob let scores[$1]=1"
                fi    
            fi
        }
        declare -ga items=( )
        for cur; do
            if [[ -r $cur ]]; then
                ## possible config file would be
                #  *.ext path  multiplier
                case $cur in
                    *.json)     scoreup @/bin/json_pp;;
                    *.png)      scoreup /usr/bin/display;;
                    *.jpeg)     scoreup /usr/bin/display;;
                    *.gif)      scoreup /usr/bin/display;;
                    *.htm*)     scoreup /usr/bin/html2text;;
                    *.mp3)      scoreup /usr/bin/play;;
                    *)          scoreup /bin/cat;;
                esac
                items+=( $cur )
            else
                echo "cat: cant find $cur, not scored, removed"               
            fi
        done
        set -- "${items[@]}"
        
        highest=0                                                                                  #1
        highest_item=/bin/false

        for score in ${(k)scores}; do 
            nscore=${scores[$score]}
            echo "$score = $nscore points"
            if [[ $nscore -gt $highest ]]; then
                echo "$nscore($score) larger than $highest($highest_item), reassigning!"
                highest="$nscore"
                highest_item="$score"
            else
                echo "$nscore($score) does not exceed $highest, no change"
            fi
        done
        echo "highest score/item: $highest/$highest_item"
        if [[ $# -eq 0 ]]; then
            echo "cat: nothing you passed existed, not doing anything"
        else        
            if [[ ${highest_item: 0:1} == "@" ]]; then
                echo "using /bin/cat $@ | ${highest_item: 1}"
                echo
                /bin/cat "$@" | "${highest_item: 1}"
                echo
                echo "end output"
            else
                $highest_item "$@"
            fi
        fi
        ;;        
esac

#cs21k

    #1 sets dummy items which wont be used unless no cmdline
    #2 pass to /bin/cat (incl. pid) and let it catch input from stdin
    
        
        