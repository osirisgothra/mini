#!/usr/bin/env perl
#
# FILE
#    tg4
#    thrgrep ported from v2.0-zsh-3.5 to v4.0-perl-5.25
#
# PROJECT
#    mini
#	 mini/eso/ubin-local subproject
#
# AUTHOR / COPYRIGHT
#
#    Copyright (C) 2021, 
#
#    Written by  osirisgothra@larnica.(none)
#    Latest versions of this and all of 's projects can be
#    obtained from:
#
#     <<projbranch>>
#
#    Documentation Available At:
#
#     <http://www.github.com/osirisgothra/mini.git>
#
# LICENSE
#
#    mini/tg4  is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  NOTES
#
#     * TODO: move 'use' statements to top if you want to keep them**
#    ** this feature will be added to the next version of perltemplate (hopefully)
#   *** warnings are disabled for experimental and once because they are pretty
#       annoying here, you might want to re-enable them for your own program
#       to do this during testing and development.
#
#  HISTORY
#
#	Sun Jan 17 13:04:41 2021
#         osirisgothra@larnica.(none) created this file using the template generator 'perltemplate'
#         and named it tg4 for the project '<projname'.
#
#
# (created with perltemplate by Gabriel T. Sharp <osirisgothra@hotmail.com>)
#

use warnings;
use v5.18;
use strict;
no warnings "experimental";			# 	allow given/when/default and smartmatching without their warnings***
no warnings "once";					# 	allow variables to be used just once without warning***
use feature "signatures";
use Getopt::Long::Descriptive; # opt|shortchar[kind] (kind is =s[tr],=i[nt], or none)
use Curses::UI;
use Path::Tiny;
use Term::Put;

### PRESET OBJECTS

## structure 
## tg4::preset
##  [properties]
##     ->uuid           unique identifier given to this object only
##     ->key            a shorter key used for high speed binary comparison
##     ->name           filename where this preset is to be stored
##     ->fmt            the format of the file, right now JSON is the only format
##     ->modified       1=changed in memory  0=no modifications
##     ->sync           1=differs from copy on disk (can be due to modified OR a file change)
##     ->sha            last shasum used to compare to diskfile
##     ->data           a list of tg4::preset::item
##
##  [methods]
##      syncnow($) no argument, use 'name', otherwise change 'name' to value of '$'
##      revert($)   like sync except always get from disk only
##      commit($)   like sync except always overwrite disk copy
##      addpreset(@)    @=(properties below, in that order)
##      rmpreset($)    $=uuid of preset to delete or index of, or key
##      empty()     remove all presets
##
## tg4::preset::item
##  [properties]
##      ->parent        the preset that this item belongs
##      ->kind          what to operate on: 'process' 'socket' 'service'
##      ->recursive     affect all children (subproc for processes, linked services for sockets, and linked processes for services)
##      ->match         the regex used to match the item (ie; in[it][te](rnal|) is valid for init and internal (and others, too, actually (init|internal) is the right way to isolate two or more values
##      ->nice          nice value (-20 to 19) for this item, or >=127 to disable
##      ->ionice        ionice value (0-7) or -1 to disable (ignored if class doesnt use it)
##      ->class         ionice class (idle, realtime, best-effort or none to disable it)
##      ->cpumask       a 32-bit (it may be 64-bit, or even 128-bit depending on your perl version, system build, etc) bitmask for which cores should operate on this process
##                      for example ( 0100 0001 (0x041 hex, 65 decimal) causes only processors 6 and 0 to be used, or 7 and 1 if you think 1-based. Values beyond maximum cores will obviously be truncated and only bits for available CPUs will be used at all (ignoring the rest), (if you had 2 cpus, then  it would be masked against 0b00000011, causing only cpu 0 to be used.
##      ->uuid
##  [methods]
##      commit          carries out all tasks needed to make the properties set true
##      clear           deletes all data in the preset
##      check           validates all data in the preset
##      next            ref to next preset (or self if only one)
##      prev            ref to previous preset (or sel...)
##      

package tg4::preset;
sub new($classname, $loadfrom = undef)
{
    my $self = { uuid => UUID::uuid(), key => (int(rand()*65535)+1) };
    bless($self,$classname);
    return $self;
    
}





### END PRESET OBJECT

package main;

my ($opt, $usage) = describe_options(
    '$0 %o <some-arg> file',
    [ 'force-extended-curses', "force curses to use extended features even if term does not support them" ],
    [ 'force-compat-curses',   "force curses to use compatible features even if extended features are available" ],
    [ 'no-dialog', "dont use dialog to show log",  ],
    [ 'no-follow',   "do not follow the log, just show it",   { default  => 79 } ],
    [],
    [ 'verbose|v',  "print extra stuff"            ],
    [ 'help',       "print usage message and exit" ],
    [],
    [ "note: extended features default to being autodetected" ],
);


say($usage->text), exit if $opt->help;
say("getopt: arguments processed: $#ARGV");

my @blacklisted_terms = qw( stterm st fbterm ansi tty vt320 ); # terms tested and failed to comply 100% with extended curses features
my $cui;  
my $term;
my $file = undef;
my $statusbar_showing = 0;
my $statusbar_text = "I am some status text";
my $progname = path( readlink($0) // $0 );

sub exit_dialog()
{
    my $return = $cui->dialog	(	-message   => "Do you really want to quit?",
	    							-title     => "Are you sure?",
		    						-buttons   => ['yes', 'no'], );
    exit(0) if $return;
}

sub curses_main($argc,$argv,$envp)
{
    my $usecompat=0;
    die("argc is not a valid number") if ref($argc) || (! $argc =~ /[0-9]+/);
    die("argv is not a reference to a list") unless ref($argv) eq "ARRAY";
    die("envp is not a hash reference") unless ref($envp) eq "HASH";        
    for my $tkind (@blacklisted_terms) {
        if ( $ENV{TERM} eq $tkind )
        {
            say(STDERR "$progname: warning($0): $tkind is known to have issues drawing extended lines properly, compat mode will be turned on");            
            $usecompat=1;       
            sleep(1);
                    
        }
    }
    $usecompat = 0 if $opt->force_extended_curses;
    $usecompat = 1 if $opt->force_compat_curses;
    die("force-extended and force-compat-curses can NOT be set at the same time!") if $opt->force_extended_curses && $opt->force_compat_curses;    
    my $debug = 0;  #1=yes 0=no
    $term = Term::Put->new();
    $term->reset(1);
    $cui = Curses::UI->new( -color_support => 1, -compat => $usecompat,
                            -clear_on_exit => $usecompat, -debug => $debug, 
                          );

    
    # MENU EVENTS

    sub help_contents_act
    {
        $cui->dialog("\n$progname Help\n\nContents\n\tHow To Use\n\t\trun with $progname, otherwise use --help for details\n\n\tAbout\n\t\tThread Priority Changer, more help will be added later\n\nEnd of Contents $ENV{TERM} == Terminal\n");
    }
    sub about_dialog
    {
        while(1) {
        my $yes = $cui->dialog( 	-message => "Template Program v1.0", -buttons => [
            {   -label    => '< About The Author >',
                -value    => 191,
                -onpress  => undef,
                -shortcut => 'o', }
        ,
        "ok"], -values  => [1,0], -title   => "About", );
        given($yes) {
            when (191)
            {
                $cui->dialog( 	-message => "The Author of this program seems like a nice enough person!", -buttons => ["ok"], -values  => [1,0], -title   => "About Author", )
            }
            default
            {
                return;
            }
        }
        }
    }
    sub open_dialog
    {
        $file = $cui->filebrowser(	-path => "/tmp", -show_hidden => 1, );

        # Filebrowser will return undef if no file was selected.
        
        if (defined $file) 
        {   
            unless (open F, "<$file") 
            {	
                # do something with file
                close F; 
            } 
            else 
            { 
                $cui->error(qq(Error opening "$file":\n$!)); 
            }
        }
    }
    sub new_dialog
    {
    }
    sub save_dialog
    {
    }
    sub saveas_dialog
    {
    }
    
    sub undo_act
    {
        # todo: undo something
    }
    sub redo_act
    {
        # todo: redo something
    }
    sub next_act
    {    
        # todo: next something
    }
    sub prev_act
    {    
        # todo: previous something
    }
    sub statusbar_act
    {
        $statusbar_showing ^= 1;   # toggle it
        $cui->status($statusbar_text) if $statusbar_showing;
        $cui->nostatus unless $statusbar_showing;
    }
    sub toolbar_act
    {
        $cui->error("It's toolbar has yet to be completed!");

    }
    sub progress_act
    {
        $cui->progress( -max => 10, -message => "Counting 2 seconds...", );
        for my $second (0..2) 
        {	
            $cui->setprogress($second); 
            sleep 1; 
        }
        $cui->noprogress;
    }

    my @menu = (

                { -label => 'File',
                  -submenu => [{        -label => 'New Preset ^N'     ,     -value => \&new_dialog  },
                               {        -label => 'Open Preset... ^O'     ,     -value => \&open_dialog  },
                               {        -label => 'Save Preset ^S'     ,     -value => \&save_dialog  },
                               {        -label => 'Save Preset As...^S,^A'     ,     -value => \&saveas_dialog  },
                               {        -label => 'Exit      ^Q',     -value => \&exit_dialog  }],
                },
                { -label => 'Edit',
                  -submenu => [{        -label => 'Undo      ^U',     -value => \&undo_act  },
                               {        -label => 'Redo'        ,     -value => \&redo_act  }],
                },
                { -label => 'Search',
                  -submenu => [{        -label => 'Find      F3',     -value => \&find_dialog  },
                               {        -label => 'Replace   F4',     -value => \&replace_dialog  }],
                },
                { -label => 'View',
                  -submenu => [{        -label => 'Statusbar ^S',     -value => \&statusbar_act  },
                               {        -label => 'Toolbar   ^T',     -value => \&toolbar_act }],
                },
                { -label => 'Presets',
                  -submenu => [{        -label => 'Previous   PGUP',     -value => \&prev_act  },
                               {        -label => 'Next       PGDN',     -value => \&next_act  }],
                },                
                { -label => 'Help',
                  -submenu => [{        -label => 'Contents   F1',     -value => \&help_contents_act  },
                               {        -label => 'About'        ,     -value => \&about_dialog  }],
                },

                );
    $cui->add( 'menu','Menubar', -menu => \@menu, -fg => "blue",);
    $cui->mainloop;
}    
my ($__argc,$__argv,$__envp) = ( scalar(@ARGV), \@ARGV, \%ENV );
$__argc++;
unshift( @$__argv, $0 );
curses_main($__argc,$__argv,$__envp);


