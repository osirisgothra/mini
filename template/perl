#!/usr/bin/perl
#
# FILE
#    ${1-$0}
#    ${2-A brand new $0 Program}
#
# PROJECT
#    ${3-mini/esoteric projects}
#	 ${4-project test perl program}
#
# AUTHOR / COPYRIGHT
#
#    Copyright (C) 2021, ${5-Gabriel T. Sharp}
#
#    Latest versions of this and all of 's projects can be
#    obtained from:
#
#    ${6-https://www.github.com/osirisgothra}
#
# LICENSE
#
#    ${1-$0}  is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  HISTORY
#
#	$(date +%c)
#         ${7-$USERNAME}@$(hostname) created this file using the template generator 'snips'
#         and named it $0 for the project '${4-yet to be named}'.
#
#
# (created with snips tool by Gabriel T. Sharp <osirisgothra@hotmail.com>)
#

use warnings;
use v5.20.2;
use strict;
use feature 'signatures';
use Cwd;
no warnings "experimental";			# 	
no warnings "once";					#
use Path::Tiny;                     # #1
use Getopt::Long::Descriptive;      #
use Data::Dumper;
use Term::Put;
use IO::Proc;
use Config::INI;

sub pname         { return path(\$0)->basename(); }
sub pndot(\$where) { return (split(/\./,pname()))[\$where];   }           # 2
sub pnsuf         { return pndot(-1); }
sub pnpfx         { return pndot(0);  }


package InlinePkg;

sub new(\$classname, \$string, \$fgc, \$bgc, \$preservemethod)
{
    my \$self = {};
    bless(\$self, \$classname);
    return \$self;
}

package main;
sub vdump(\$var, \$varname="value")
{
    \$Data::Dumper::Terse = 1;
    \$Data::Dumper::Varname = \$varname;
    print "var \$varname = ";
    say Dumper(\$var);
}

my \$proc = new IO::Proc(\$\$);
my \$term = new Term::Put( \$ENV{"TERM"} );
my \$rc = new Config::INI( path(\$ENV{"HOME"})->child(".config")->child(pnpfx())->child(pnsuf() . pnpfx() . "rc") );


my (\$opt, \$usage) = describe_options(
    path(\$0)->basename() . ' %o <some-arg> file',    
    [],
    [ 'verbose|v',  "print extra stuff"            ],
    [ 'help',       "print usage message and exit" ],
);
say(\$usage->text), exit if \$opt->help;
say("getopt: arguments processed: \$#ARGV");


my \$i = new InlinePkg("string",0,0,1);
vdump(\$term,"term");
vdump(\$proc,"proc");
vdump(\$i,   "inlinepkg");
vdump(\$rc,  "rc");


# cs21k
# 

#1  simple path support (cross platform)
#2  these all rely on one another to work correctly and delegate as needed
